// Filename: recastNavMesh.I
// Created by:  rdb (20Jul10)
//
////////////////////////////////////////////////////////////////////
//
// PANDA 3D SOFTWARE
// Copyright (c) Carnegie Mellon University.  All rights reserved.
//
// All use of this software is subject to the terms of the revised BSD
// license.  You should have received a copy of this license along
// with this source code in a file named "LICENSE."
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_cell_size
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_cell_size() const {
  return _cell_size;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_cell_size
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_cell_size(float cell_size) {
  _cell_size = cell_size;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_cell_height
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_cell_height() const {
  return _cell_height;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_cell_height
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_cell_height(float cell_height) {
  _cell_height = cell_height;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_walkable_slope_angle
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_walkable_slope_angle() const {
  return _walkable_slope_angle;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_walkable_slope_angle
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_walkable_slope_angle(float walkable_slope_angle) {
  _walkable_slope_angle = walkable_slope_angle;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_walkable_height
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_walkable_height() const {
  return _walkable_height;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_walkable_height
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_walkable_height(float walkable_height) {
  _walkable_height = walkable_height;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_walkable_climb
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_walkable_climb() const {
  return _walkable_climb;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_walkable_climb
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_walkable_climb(float walkable_climb) {
  _walkable_climb = walkable_climb;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_walkable_radius
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_walkable_radius() const {
  return _walkable_radius;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_walkable_radius
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_walkable_radius(float walkable_radius) {
  _walkable_radius = walkable_radius;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_max_edge_length
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_max_edge_length() const {
  return _max_edge_length;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_max_edge_length
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_max_edge_length(float max_edge_length) {
  _max_edge_length = max_edge_length;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_max_simplification_error
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_max_simplification_error() const {
  return _max_simplification_error;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_max_simplification_error
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_max_simplification_error(float max_simplification_error) {
  _max_simplification_error = max_simplification_error;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_min_region_size
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_min_region_size() const {
  return _min_region_size;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_min_region_size
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_min_region_size(float min_region_size) {
  _min_region_size = min_region_size;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_merge_region_size
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_merge_region_size() const {
  return _merge_region_size;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_merge_region_size
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_merge_region_size(float merge_region_size) {
  _merge_region_size = merge_region_size;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_detail_sample_distance
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_detail_sample_distance() const {
  return _detail_sample_distance;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_detail_sample_distance
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_detail_sample_distance(float detail_sample_distance) {
  _detail_sample_distance = detail_sample_distance;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_detail_sample_max_error
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE float RecastNavMesh::
get_detail_sample_max_error() const {
  return _detail_sample_max_error;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_detail_sample_max_error
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_detail_sample_max_error(float detail_sample_max_error) {
  _detail_sample_max_error = detail_sample_max_error;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::get_source
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE CPT(PandaNode) RecastNavMesh::
get_source() const {
  return _source;
}

////////////////////////////////////////////////////////////////////
//     Function: RecastNavMesh::set_source
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
INLINE void RecastNavMesh::
set_source(CPT(PandaNode) node) {
  _source = node;
}

